{"version":3,"sources":["components/card-list/card-component.js","components/card-list/card-list-component.js","components/card-list/search-component.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mVAGaA,G,MAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAY,kBACb,yBAAKC,IAAM,WAAWC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BAEzB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCJbC,G,MAAW,SAAAR,GACpB,OAAO,yBAAKC,UAAY,aAClBD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,kBAAC,EAAD,CAAMO,IAAOP,EAAQC,GAAID,QAAWA,UCJnCQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACIb,UAAY,SACZc,KAAO,SAEPF,YAAeA,EAGfG,SAAYF,MCsDLG,G,kBAtDb,aAAe,IAAD,8BACZ,+CAOKC,MAAQ,CACXT,SAAS,GACTU,YAAa,IAVH,E,iFAgBO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAChB,SAAUe,S,+BAElC,IAAD,SAE2BE,KAAKR,MAA/BT,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACZQ,EAAmBlB,EAASmB,QAAO,SAAAxB,GAAO,OAC9CA,EAAQE,KAAKuB,cAAcC,SAASX,EAAYU,kBAClD,OAQE,yBAAK5B,UAAW,OACd,gDACA,kBAAC,EAAD,CACEY,YAAc,qBACdC,aAAgB,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAE5D,kBAAC,EAAD,CAAUxB,SAAYkB,S,GAzCZO,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.8e5aa8f1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-component-styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className = 'card-container'>\r\n        <img alt = \"monsters\" src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        {/* robohash is unique webservice which provides whatever image depends on the numbers u give as input (robot, alien, monsters) */}\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from \"react\";\r\nimport {Card } from './card-component';\r\nimport './card-list-styles.css'\r\n\r\nexport const CardList = props => {\r\n    return <div className = 'card-list'> \r\n        { props.monsters.map(monster => (\r\n            <Card key = {monster.id} monster = {monster} />\r\n            // passing the each of the monster into card component using props as previously used for card-list-component \r\n        ))}\r\n    </div>//the className here mentioned is class selector used in css file\r\n    // Here {props.children } means whatever comes there are considered as children\r\n}","import React from 'react';\r\nimport './search-component-styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n        className = 'search'\r\n        type = 'search' \r\n        // placeholder = 'search your monsters' \r\n        placeholder = {placeholder}\r\n        // onChange ={e => {this.setState({searchField:e.target.value}, () => console.log(this.state))}} />\r\n        // onchange event should be dynamic hence it is sent through props\r\n        onChange = {handleChange} />\r\n        // onChange = {e => this.setState({searchField: e.target.value})}/>\r\n)","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport {CardList} from './components/card-list/card-list-component'\nimport { SearchBox } from './components/card-list/search-component.js'\nimport './App.css';\n/*\n  what is functional components and class components refer:\n  https://codeburst.io/react-js-understanding-functional-class-components-e65d723e909\n */\n//Class components\nclass App extends Component {\n  constructor() {\n    super();\n    //state can be used in class components and not in functiional components and class component very helpful to maintain state \n    // this.state = {\n    //   string:'Hello Aadu!'\n    // };\n    \n    //project\n    this.state = {\n      monsters:[],\n      searchField: ''\n    }\n  }\n\n  //Lifecycle methods \n  //componentdidmount is used to fetch data from external servers or api's, once everyhting is render componentDidMount() is called\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}))\n  }\n  render() {\n    //this is object destructuring\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      /*this is JSX\n      jsx is a combination of javascript and html to make UI better, jsx uses camelCase of attributes \n      {<h2>this is javascript expressions and not html </h2>}*/ \n      // <div>\n      //   <h2>{this.state.string}</h2>\n      //  <p>Iam using class component</p>\n      // </div>\n      <div className= \"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder = \"search ur monsters\"\n          handleChange = {e => this.setState({searchField: e.target.value})}\n        />\n        <CardList monsters = {filteredMonsters} />\n        {/* I have sent the monsters into card-list component bcoz displaying card-list components is its duty */}\n          {/* u can send anything using props from app.js to the component ardList */}\n          {/* whatever u write inside the component block is considered as children and it can be accessed as props.children in card-list-component.js file */}\n        \n          {/* //key is required because if any one of the state changes React does not  re render everything in the bowl only one will be changed and for that key is required */}\n         {/* </CardList> */}\n        \n          \n      </div>\n    )\n  }\n}\n\nexport default App;\n\n//THE JOB OF REACT DEVELOPER\n/*\n  1.  Decide on Components\n      (decidde what should be the components adn divide every small stuffs such as card and card-list in the current project)\n  2.  Decide the state and where it lives\n  3.  what changes when state changes (refer 2019 july udemy react course-React Basics- 21video)\n*/\n// *********************************************\n\n// how to Deploy the website\n/*\n  go to package.json and type \"homepage\": \"https://adarshav.github.io/React\"\n */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}